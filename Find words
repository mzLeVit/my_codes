import random

class WordSearch:
    def __init__(self, words, size=10):
        self.size = size
        self.grid = [[' ' for _ in range(size)] for _ in range(size)]
        self.words = words
        self.directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
        self.place_words()

    def place_words(self):
        max_attempts = 100  # Maximum attempts to place a word
        for word in self.words:
            word = word.upper()
            direction = random.choice(self.directions)
            attempt = 0
            while attempt < max_attempts:
                x, y = random.randint(0, self.size - 1), random.randint(0, self.size - 1)
                dx, dy = direction
                end_x, end_y = x + len(word) * dx, y + len(word) * dy

                if 0 <= end_x < self.size and 0 <= end_y < self.size:
                    valid_placement = True
                    for i, letter in enumerate(word):
                        if self.grid[x + i * dx][y + i * dy] != ' ' and self.grid[x + i * dx][y + i * dy] != letter:
                            valid_placement = False
                            break
                    if valid_placement:
                        for i, letter in enumerate(word):
                            self.grid[x + i * dx][y + i * dy] = letter
                        break
                attempt += 1
            else:
                print(f"Unable to place word '{word}' after {max_attempts} attempts.")

    def display_grid(self):
        for row in self.grid:
            print(' '.join(row))

    def play(self):
        print("Welcome to Word Search!")
        print("Find the words in the grid below.")

        self.display_grid()

        while True:
            found = False
            word = input("Enter a word: ").upper()
            if word == 'QUIT':
                print("Thank you for playing! Goodbye.")
                break
            for row in range(self.size):
                for col in range(self.size):
                    for dx, dy in self.directions:
                        end_x, end_y = row + len(word) * dx, col + len(word) * dy
                        if 0 <= end_x < self.size and 0 <= end_y < self.size:
                            if ''.join(self.grid[row + i * dx][col + i * dy] for i in range(len(word))) == word:
                                found = True
                                print(f"Found {word} at position ({row}, {col}) to ({end_x - dx}, {end_y - dy}).")
                                break
                if found:
                    break
            if not found:
                print(f"Word {word} not found in the grid.")

words_to_find = ['PYTHON', 'JAVA', 'CPLUSPLUS', 'RUBY', 'JAVASCRIPT', 'HTML', 'CSS', 'SWIFT']
word_search_game = WordSearch(words_to_find)
word_search_game.play()
